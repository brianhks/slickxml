/*
 * Copyright (c) 2010, Brian Hawkins
 * Permission is granted to use this code without restriction as long
 * as this copyright notice appears in all source files.
 */
 
import tablesaw.*;
import tablesaw.rules.*;
import tablesaw.addons.java.*;
import tablesaw.addons.ivy.IvyAddon;
import org.apache.tools.ant.taskdefs.optional.junit.*;
import org.apache.tools.ant.*;

print("===============================================");


jp = new JavaProgram().setProgramName("slickxml")
		.setSourceDirectory("src").setup();

ivyConfig = "runtime";
ivy = new IvyAddon().setSettingsFile("ivysettings.xml").setup();
resolveRule = ivy.getResolveRule(ivyConfig);
		
jp.getCompileRule().addDepend(resolveRule);

classpath = jp.getCompileRule().getClasspath();

pomRule = ivy.createPomRule("build/jar/pom.xml")
		.addDepend(jp.getJarRule())
		.addLicense("LGPL", "http://www.gnu.org/licenses/lgpl.html", "repo")
		.addDeveloper("brianhks", "Brian", "brianhks1+slickxml@gmail.com");
		
	
//-------------------------------------------------------------------
//==-- TEST --==
testRule = new SimpleRule("test").setMakeAction("doTest").setDescription("Run simple test")
		.addDepend(jp.getJarRule())
		.alwaysRun();
void doTest(Rule rule)
	{
	classpath.addPath(".");
	classpath.addPaths(resolveRule.getClasspath("runtime"));
	saw.exec("java -cp "+classpath+" org.agileclick.slickxml.SlickParser test/parser_config.xml");
	testSource = new RegExFileSet("build/test", ".*\\.java").recurse().getFullFilePaths();
	print(testSource);
	javacDef = saw.getDefinition("sun_javac");
	javacDef.set("sourcepath", "build/test");
	javacDef.set("class_dir", "build/test");
	javacDef.set("sourcefile", testSource);
	saw.exec(javacDef.getCommand());
	}
	
	
//------------------------------------------------------------------------------
//==-- Maven Artifacts --==
mavenArtifactsRule = new SimpleRule("maven-artifacts").setDescription("Create maven artifacts for maven central")
		.addSource(jp.getJarRule().getTarget())
		.addSource(jp.getJavaDocJarRule().getTarget())
		.addSource(jp.getSourceJarRule().getTarget())
		.addSource("build/jar/pom.xml")
		.setMakeAction("signArtifacts");
		
void signArtifacts(Rule rule)
	{
	for (source : rule.getSources())
		{
		cmd = "gpg -ab "+source;
		saw.exec(cmd);
		}
	}
	
new JarRule("maven-bundle", "build/bundle.jar").setDescription("Create bundle for uploading to maven central")
		.addDepend(mavenArtifactsRule)
		.addFileSet(new RegExFileSet(saw.getProperty(JavaProgram.JAR_DIRECTORY_PROPERTY), ".*"));
	

saw.setDefaultTarget("jar");	
 
